using UnityEngine;
using System.Net.Http;
using System.Text;
using System;
using System.Threading.Tasks;
using Newtonsoft.Json;
using System.IO;
using System.Collections.Generic;
using System.Collections;

public class EmailSender : MonoBehaviour
{
	private string senderEmail = "ronaldounited07c@gmail.com";
	[SerializeField] private List<string> recipientEmails = new List<string> { "chitrang.patel@viitor.cloud", "adamcarlos0123@gmail.com" };

	private AnalyticsManager _analyticsManager;
	private AnalyticsManager analyticsManager
	{
		get
		{
			if (_analyticsManager is null)
			{
				_analyticsManager = GetComponent<AnalyticsManager>();
			}
			return _analyticsManager;
		}
	}

	private const string apiKey = "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";
	private TimeSpan scheduledTime = new TimeSpan(19, 0, 0); // 7:00 PM local time

	private void Start()
	{
		InvokeRepeating(nameof(CheckAndSendEmail), 0, 60); // Check every 60 seconds
	}

	private async void CheckAndSendEmail()
	{
		DateTime currentTime = DateTime.Now;
		DateTime scheduledDateTime = DateTime.Today.Add(scheduledTime);

		if (currentTime >= scheduledDateTime && currentTime < scheduledDateTime.AddMinutes(1))
		{
			if (Application.internetReachability != NetworkReachability.NotReachable)
			{
				await ComposeAndSendEmail();
			}
			else
			{
				StartCoroutine(CheckInternetAndSendEmail());
			}
		}
	}

	private IEnumerator CheckInternetAndSendEmail()
	{
		while (Application.internetReachability == NetworkReachability.NotReachable)
		{
			yield return new WaitForSeconds(60);
		}
		ComposeAndSendEmail().Wait();
	}

	private async Task ComposeAndSendEmail()
	{
		try
		{
			string companyName = (string)analyticsManager.GetParameterData(Constant.DEVICE_INFO_CONST, "Company Name");
			string deviceModel = (string)analyticsManager.GetParameterData(Constant.DEVICE_INFO_CONST, "Device Model");
			string operatingSystem = (string)analyticsManager.GetParameterData(Constant.DEVICE_INFO_CONST, "Operating System");
			string deviceName = (string)analyticsManager.GetParameterData(Constant.DEVICE_INFO_CONST, "Device Name");
			string productName = (string)analyticsManager.GetParameterData(Constant.DEVICE_INFO_CONST, "Product Name");
			string appVersion = (string)analyticsManager.GetParameterData(Constant.DEVICE_INFO_CONST, "App Version");
			string screenResolution = (string)analyticsManager.GetParameterData(Constant.DEVICE_INFO_CONST, "Screen Resolution");
			string networkType = (string)analyticsManager.GetParameterData(Constant.DEVICE_INFO_CONST, "Network Type");
			string batteryLevel = (string)analyticsManager.GetParameterData(Constant.DEVICE_INFO_CONST, "Battery Level");

			string subject = $"{companyName} Analytics Tool - Device Information Report";

			string body = $"<h1>Device Information Report</h1><p>This email contains the device information report generated by the custom analytics tool. Please find the attached file for detailed insights.</p><p>**Device Details:**<br/>Device Model: {deviceModel}<br/>Operating System: {operatingSystem}<br/>Device Name: {deviceName}<br/>Company Name: {companyName}<br/>Product Name: {productName}<br/>App Version: {appVersion}<br/>Screen Resolution: {screenResolution}<br/>Network Type: {networkType}<br/>Battery Level: {batteryLevel}</p>";

			// Read the JSON content
			byte[] fileBytes = File.ReadAllBytes(analyticsManager.GetFilePath());

			// Create attachment with txt extension but same content
			Attachment attachment = new Attachment
			{
				Content = Convert.ToBase64String(fileBytes),
				Name = Path.GetFileNameWithoutExtension(analyticsManager.GetFilePath()) + ".txt",  // Change extension to .txt
				Type = "text/plain"
			};

			await SendEmailAsync(senderEmail, recipientEmails.ToArray(), subject, body, new[] { attachment });
		}
		catch (Exception ex)
		{
			Debug.LogError($"Error sending email: {ex.Message}\nStack trace: {ex.StackTrace}");
		}
	}

	private async Task SendEmailAsync(string senderEmail, string[] recipientEmails, string subject, string body, Attachment[] attachmentPath)
	{
		if (attachmentPath.Length == 0)
		{
			//LogError("Email Send Error: No attachment found");
			return;
		}
		using HttpClient client = new HttpClient();
		// Set the API key for authentication
		client.DefaultRequestHeaders.Add("api-key", apiKey);


		// Prepare the recipients list
		Recipient[] recipients = new Recipient[recipientEmails.Length];
		for (int i = 0; i < recipientEmails.Length; i++)
		{
			recipients[i] = new Recipient
			{
				Email = recipientEmails[i]
			};
		}

		// Create the EmailContent object with the attachment
		EmailContent emailContent = new EmailContent
		{
			Sender = new Sender
			{
				Email = senderEmail
			},
			To = recipients,
			Subject = subject,
			HtmlContent = body,
			Attachment = attachmentPath
		};

		// Serialize the email content to JSON
		string jsonBody = JsonConvert.SerializeObject(emailContent, Formatting.Indented);

		// Create the StringContent with the JSON body
		StringContent content = new StringContent(jsonBody, Encoding.UTF8, "application/json");

		// Send the request to Sendinblue's SMTP endpoint
		HttpResponseMessage response = await client.PostAsync("https://api.sendinblue.com/v3/smtp/email", content);

		Debug.Log($"response.StatusCode: {response.StatusCode}");
		// Check the response status
		if (response.IsSuccessStatusCode)
		{
			Debug.Log("Email sent successfully!");
		}
		else
		{
			// Output the response error for debugging
			var errorMessage = await response.Content.ReadAsStringAsync();
			Debug.Log($"Failed to send email. Response: {errorMessage}");
		}
	}

	public class Sender
	{

		[JsonProperty("email")]
		public string Email
		{
			get;
			set;
		}
	}

	public class Recipient
	{

		[JsonProperty("email")]
		public string Email
		{
			get;
			set;
		}
	}

	public class EmailContent
	{

		public Sender Sender
		{
			get;
			set;
		}

		public Recipient[] To
		{
			get;
			set;
		}

		public string Subject
		{
			get;
			set;
		}

		public string HtmlContent
		{
			get;
			set;
		}

		[JsonProperty("attachment")]
		public Attachment[] Attachment
		{
			get;
			set;
		}
	}

	public class Attachment
	{

		[JsonProperty("content")]
		public string Content
		{
			get;
			set;
		}

		[JsonProperty("name")]
		public string Name
		{
			get;
			set;
		}

		[JsonProperty("type")]
		public string Type
		{
			get;
			set;
		}
	}
}
